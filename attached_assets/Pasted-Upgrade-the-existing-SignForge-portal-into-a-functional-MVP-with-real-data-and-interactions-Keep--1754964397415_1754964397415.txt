Upgrade the existing “SignForge” portal into a functional MVP with real data and interactions.
Keep the current look/feel, but add full CRUD + uploads + a takeoffs canvas. Use the same stack already set up (React + Vite + TS + Tailwind on the client; Node + Express + TS + better-sqlite3 on the server). If something is missing, create it.

Goals
Create Project flow (customer or PM): name, logo upload, details, then drawing set upload.

Drawing review: show PDF pages as thumbnails; let me check which pages to include in takeoffs.

Takeoffs screen: show chosen pages; right-click to place a new sign marker; pick stage and sign-type.

Sign-types: each project has its own list, but I can copy from a Master Sign-Type Library into a project.

Data model (extend or create tables)
Use/extend SQLite tables with better-sqlite3. If some exist, migrate in place without losing seed data.

users(id, email, password_hash, name, role, org)

projects(id, name, address, status, logo_path, client_org, created_at)

project_members(id, project_id, user_id, role_in_project) // optional, for later

drawing_sets(id, project_id, file_path, filename, uploaded_at, total_pages INTEGER, included_pages_json TEXT)

Store the full PDF once; we won’t physically split pages. We’ll track pages with metadata.

takeoff_pages(id, drawing_set_id, page_number, is_included) // mirror of included_pages_json; keep both for convenience

master_sign_types(id, name, category, default_specs_json) // your “library”

project_sign_types(id, project_id, name, category, specs_json, source_master_id) // copied or custom

takeoff_markers(id, project_id, drawing_set_id, page_number, x_norm, y_norm, sign_type_id, stage, notes, created_at)

stage ENUM TEXT: 'draft' | 'review' | 'approved'

x_norm, y_norm are normalized 0..1 coordinates on the page

If any table already exists with a similar purpose, add columns as needed (non-breaking). Write a tiny migration in the server startup to ALTER TABLE safely.

Backend API (add these routes)
Auth already exists—keep it. Add:

Projects

POST /api/projects – body: {name, address?, client_org?, status?, logo(file)}; returns project

Use multer for logo; save to /uploads/logos; store logo_path.

GET /api/projects – list mine (role-based OK to be simple)

GET /api/projects/:id – details

Drawing sets

POST /api/projects/:id/drawings – upload one PDF (multer → /uploads/drawings), parse page count (client will also detect pages); store total_pages. Set all takeoff_pages with is_included=false initially. Return drawing_set with total_pages.

PUT /api/drawing-sets/:drawingSetId/pages – body: { includedPages: number[] } → update included_pages_json and takeoff_pages.is_included.

Master sign-types

GET /api/master-sign-types – list master library

POST /api/master-sign-types – create (for future admin use)

Project sign-types

GET /api/projects/:id/sign-types – list for project

POST /api/projects/:id/sign-types/copy – body: { masterIds: number[] } → copy from master into project

POST /api/projects/:id/sign-types – create custom project sign-type (name, category, specs_json)

PUT /api/project-sign-types/:id – update

DELETE /api/project-sign-types/:id – delete

Takeoffs

GET /api/projects/:id/takeoffs – returns: drawing sets, included pages, markers, and project sign-types

POST /api/projects/:id/takeoffs/markers – body: { drawingSetId, pageNumber, xNorm, yNorm, signTypeId, stage, notes? } → create marker

PUT /api/takeoffs/markers/:markerId – update stage/signTypeId/notes

DELETE /api/takeoffs/markers/:markerId

Implement simple authorization: users can read/write projects they created; keep it basic for demo.

Frontend UX (React Router pages/components)
1) Create Project Wizard
Route: /projects/new

Step 1 – Details: name (required), address, client org, status dropdown, logo upload (image).

Step 2 – Drawing Upload: upload a single PDF → sends to /api/projects/:id/drawings. On success, route to Select Pages.

2) Select Pages for Takeoffs
Route: /projects/:id/drawings/:drawingSetId/select-pages

Render PDF thumbnails using pdfjs-dist in the browser.

Each page gets a checkbox.

Buttons: “Select All”, “Clear All”, “Continue to Takeoffs”.

“Continue” → PUT /api/drawing-sets/:drawingSetId/pages with the chosen page numbers, then route to Takeoffs.

Don’t physically split PDFs—just store included page numbers.

3) Takeoffs Canvas
Route: /projects/:id/takeoffs

Left sidebar:

Dropdown to choose Drawing Set

Page selector for included pages

Project Sign-Types list (with category tags)

Button: “Copy from Master Library” → opens modal with master list (multi-select + copy API call).

Main area:

Display the selected page using pdf.js page render (or a canvas over an image fallback).

Right-click on the page opens a context menu:

“Place Sign Marker” → opens a small form to choose Sign-Type (from project list) and Stage (draft/review/approved).

After submit, draw a marker (small dot/pin).

Click a marker to open a side panel showing: sign-type, stage, coordinates, notes (editable), and quick actions: change stage, change sign-type, delete.

Top bar: breadcrumbs back to project.

Normalize pointer coordinates to 0..1 so re-renders with different zoom still place markers correctly. Store x_norm + y_norm.

Master Library → Project Copy Flow
Modal lists master_sign_types with search/filter.

Multi-select, confirm → POST /api/projects/:id/sign-types/copy → copies fields: name, category, specs_json, sets source_master_id.

After copy, sidebar refresh shows the new items immediately.

Small but important details
Use React Query for API calls, optimistic updates for marker create/update.

Use multer for file uploads (logo + drawings).

Store files under /uploads/logos and /uploads/drawings.

Add a simple toast system for success/errors.

Add empty states with clear CTAs.

Add a tiny migration on server start to ALTER TABLE if missing columns (idempotent).

Acceptance Criteria (I must be able to do all of these)
Create a project with name, address, status, and a logo image. See it in the projects list.

Upload a drawing set (PDF) to that project; the server stores it and returns the page count.

Select pages to include for takeoffs via checkboxes on page thumbnails; saving updates the backend.

Open Takeoffs, pick a page, right-click to place a marker, choose sign-type and stage, and see the marker appear where I clicked.

Copy sign-types from the Master Library into the project, then place markers using those copied sign-types.

Edit a marker (change stage/type, add notes) and delete a marker.

Refresh the page: all data persists in SQLite and files remain accessible in /uploads.

Minimal seed & helpers (add if missing)
Seed a few master_sign_types (e.g., “ADA Room ID”, “Parking”, “Monument”) with basic default_specs_json.

Seed one user as PM and one as Customer for testing.

If you need a PDF to test, generate a placeholder server-side or include a sample in /server/seed-assets/.

Implementation Hints
PDF preview: use pdfjs-dist in the client to render thumbnails and pages to <canvas>.

Marker math: store normalized positions; when rendering, multiply by canvas width/height.

Context menu: capture right-click on the canvas, show a small menu at cursor position.

Keep components tidy: TakeoffsCanvas.tsx, PagePicker.tsx, ProjectCreateWizard.tsx, SignTypeCopyModal.tsx.

Don’t break existing pages
Keep the old “Overview / Sign Types / Signs / Proof” pages.

Add links so I can reach the Create Project wizard and the Takeoffs screen from the Project Overview.

If something is unclear, make a reasonable choice and comment the code so I can tweak it later.